package chap06.OOP;

public class OOPBasicExample {
    public static void main(String[] args) {
        // 객체 지향 프러그래밍
        // 소프트웨어를 만드는 과정
        // 실제 제품을 조립하는 과정으로 비유가능
        // 최대한 부품을 나눠서 구현해 보자
        // 부품이 객체에 해당

        // 객체란 무엇인가 - 다른 것과 식별 가능한 것
        // 속성과 동작으로 구분된다 속성 - 필드, 동작 - 메소드
        // 현실 세계의 객체 -> 소프트웨어의 객체로 표현: 객체모델링

        // 왜 객체로 만들어야 하는가?
        // 구현이 장점

        // 객체는 상호작용을 한다
        // 사람이 계산기를 사용함
        // 메소드를 이용

        // 메소드..
        // 매개변수(intput)와 리턴(output)
        // ex) 계산기에 더하기를 요청 ... 피연산자가 필요. 이 두 값을 매개변수로 전달

        // 객체 간의 관계
         // 집합 관계
          // 자동차 : 엔진, 타이어, 헨들, 브레이크 .....
         // 사용 관계
         // 상속 관계
          // 부모와 지식 관계
          // 부모의 속성 혹은 동작을 자식이 물려받을 수 있음

        // 객체 지향 프로그래밍의 특징
         // 1. 캡슐화
          // "알약"
          // 실제 외부에는 객체의 데이터와 동작을 감춤
          // 굳이 불필요하게 노출할 필요가 없어서
          // public, private ...

        // 2. 상속
          // 부모 클래스의 속성과 동작을 자식 클래스가 물려받는 것
          // 코드의 재사용성을 높임, 유지보수 용이 ....

        // 3. 다형성
          // 객체지향의 핵심
          // 가게마다 다른 호떡

        // 클래스 vs 객체
         // 클래스: 객체를 만드는 설계도
         // 객체: 클래스를 통해 생성된 인스턴스
         // Car A6 = new Car("audi", "a6", 2023);
         // Car G80 = new Car("genesis", "g80", 2022);
          // Car : 클래스
          // A60, G80 : 객체



    }
}

